
server:
  port:
    8080
  tomcat:
    mbeanregistry:
      enabled: true
    threads:
      max: 150
      min-spare: 150
    accept-count: 300

mybatis:
  mapper-locations: classpath:mapper/*.xml    # mapper映射文件位置
  type-aliases-package: org.example.bstest.demos.web.DTO   # 实体类所在的位置
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl   #用于控制台打印sql语句


spring:
  application:
    name: bishe
#    mysql
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    dbcp2:
      min-idle: 5                                # 数据库连接池的最小维持连接数
      initial-size: 5                            # 初始化连接数
      max-total: 5                               # 最大连接数
      max-wait-millis: 150                       # 等待连接获取的最大超时时间
#  mongodb
  data:
    mongodb:
      host: localhost
      port: 27017
      database: mydb
      username: root
      password: root
#  kafka
  kafka:
    # kafka连接地址
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 2
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 512
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 102400
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1

    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      一次性拉取消息数max
      max-poll-records: 10
      bootstrap-servers: localhost:9090
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 3
      #listner负责ack，每调用一次，就立即commit
      ack-mode: batch
#      topic 不存在时不报错
      missing-topics-fatal: false
#      批处理
      type: batch






  cache:
    type: caffeine
#    caffeine:
#      spec: maximumSize=20,expireAfterWrite=10s

# application.yml
management:
  server:
    port:8080

  endpoints:
    enabled-by-default: true #暴露所有端点信息
    web:
      exposure:
        include: "prometheus"
#        prometheus
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      sla:
        http:
          server:
            requests: 1ms,5ms,10ms,50ms,100ms,200ms,500ms,1s,5s
      percentiles-histogram:
        http:
          server:
            requests: true # 开启 http server 的请求监控



logging:
  level:
    org.springframework.data.mongodb.core.MongoTemplate: off

#配置熔断策略：
hystrix:
  metrics:
    polling-interval-ms: 2000
    enabled: on
  command:
    default:
      circuitBreaker:
        #强制打开熔断器
        forceOpen: false
        # 触发熔断错误⽐例阈值，默认值50%
        errorThresholdPercentage: 50
        # 熔断后休眠时⻓，默认值5秒
        sleepWindowInMilliseconds: 3000
        # 熔断触发最⼩请求次数，默认值是20
        requestVolumeThreshold: 10
      execution:
        isolation:
          thread:
            # 熔断超时设置，默认为1分钟
            timeoutInMilliseconds: 5000

feign:
  circuitbreaker:
    enabled: true








# 自定义的kafka配置项
kafka:
  topic:
    name: TEST_TOPIC
  group:
    id: TEST_GROUP
